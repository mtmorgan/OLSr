% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get.R
\name{get_ontologies}
\alias{get_ontologies}
\alias{get_ontology}
\alias{get_roots}
\alias{get_terms}
\alias{get_term}
\alias{get_parents}
\alias{get_ancestors}
\alias{get_children}
\alias{get_descendants}
\title{Retrieve Ontologies, Terms, and their Relatives}
\usage{
get_ontologies()

get_ontology(ontology)

get_roots(ontology)

get_terms(ontology, all_ontologies = FALSE)

get_term(ontology, id, form = c("id", "obo_id", "short_form", "iri"))

get_parents(ontology, id, all_ontologies = FALSE)

get_ancestors(ontology, id, all_ontologies = FALSE)

get_children(ontology, id, all_ontologies = FALSE)

get_descendants(ontology, id, all_ontologies = FALSE)
}
\arguments{
\item{ontology}{character(1) \code{id} (from \code{get_ontologies()}) of the
ontology of interst.}

\item{all_ontologies}{logical(1) when \code{FALSE} (default), only
terms, parents, etc., defined in \code{ontology} are returned. When
\code{TRUE}, terms from all ontologies are associated with terms in
\code{ontology} are returned.}

\item{id}{character(1) the term identifier, usually 'obo_id' (e.g.,
"CL:0002494") but for \code{get_term()} as specified by \code{form}.}

\item{form}{character(1) the form of the identifier, as describe in Details.}
}
\value{
The \verb{get_*()} functions return tibbles summarizing information
retrieved from the OLS. The meaning of individual columns is as in
the service; columns are \emph{not} renamed, but have been re-ordered to
prioritize useful information.
}
\description{
\code{get_ontologies()} queries the OLS for information on
all available ontologies.

\code{get_ontology()} retrieves
information on a single ontology.

\code{get_roots()} and \code{get_terms()} return all 'roots' and
terms in an ontology.

\code{get_term()} returns a tibble with detailed
information about a single term.

\code{get_parents()}, \code{get_ancestors()}, \code{get_children()},
and \code{get_descendants()} retrieve parents, ancestors, children
and descedants of a single term.
}
\details{
The functions documented on this page provide a programmatic
interface to the EMBL-EBI Ontology Lookup Service at
\url{https://www.ebi.ac.uk/ols4/}. The API is described at
\url{https://www.ebi.ac.uk/ols4/help}

The functions use an on-disk cache of results retrieved from the
internet to speed interactive analysis. Generally, initial queries
are 'slow', but subsequent identical queries are very fast. Details
of the cache, some edge cases where the cache can get in the way of
current results, and strategies for cache management are summarized
in the 'Cache Management' section of the vignette.

In an attempt to simplify navigation of results, values returned
from API calls are presented as a \code{tibble} with invariant columns
removed.

Data returned by the OLS is often hierarchical, resulting in \code{list}
columns in the tibble. In some cases (e.g., \code{get_ontologies()}) the
list columns have been un-nested (using \code{tidyr::unnest_wider()}) to
provide users with relevant information. Downstream processing
steps may also find it beneficial to understand 'tidy' approaches
to working with hierarchical data in tibbles, as outlined in
chapter 23 of 'R For Data Science' (2e),
\url{https://r4ds.hadley.nz/rectangling}. This is illustrated in
the "Hierarchical Data" section of the vignette.

For \code{get_term()}, the identifier \code{id} can be one of three
forms. The \code{id} and \code{obo_id} forms are synonyms and follow the
pattern ontology abbrevation, \code{:}, and term id, e.g., "CL:0002494".
The \code{short_form} is typically like \code{obo_id} but with \code{:} replaced
by \verb{_}. An \code{iri} is the purl resource locator, typically
"http://purl.obolibrary.org/...".

When no relatives are found, \code{get_parents()} etc. return a tibble
with 0 rows (and sometimes 0 columns).
}
\examples{
onto <- get_ontologies()
onto


get_ontology("cl") |>
    glimpse()

get_roots("cl")

terms <- get_terms("cl")
terms

CL0002494 <- get_term("cl", "CL:0002494")
CL0002494 |>
    glimpse()

get_parents("cl", "CL:0002350")

get_ancestors("cl", "CL:0002494")
get_ancestors("cl", "CL:0002350")

get_children("cl", "CL:0002494")
get_children("cl", "CL:0002350")    # no children, 0 x 0 tibble

get_descendants("cl", "CL:0002494")
get_descendants("cl", "CL:0002350") # no descedants, 0 x 0 tibble

}
